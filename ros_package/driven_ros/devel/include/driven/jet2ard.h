// Generated by gencpp from file driven/jet2ard.msg
// DO NOT EDIT!


#ifndef DRIVEN_MESSAGE_JET2ARD_H
#define DRIVEN_MESSAGE_JET2ARD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace driven
{
template <class ContainerAllocator>
struct jet2ard_
{
  typedef jet2ard_<ContainerAllocator> Type;

  jet2ard_()
    : throttle(0)
    , brake(0)
    , stop_sign(0)
    , start_time()  {
    }
  jet2ard_(const ContainerAllocator& _alloc)
    : throttle(0)
    , brake(0)
    , stop_sign(0)
    , start_time()  {
  (void)_alloc;
    }



   typedef int64_t _throttle_type;
  _throttle_type throttle;

   typedef int64_t _brake_type;
  _brake_type brake;

   typedef int64_t _stop_sign_type;
  _stop_sign_type stop_sign;

   typedef ros::Time _start_time_type;
  _start_time_type start_time;





  typedef boost::shared_ptr< ::driven::jet2ard_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::driven::jet2ard_<ContainerAllocator> const> ConstPtr;

}; // struct jet2ard_

typedef ::driven::jet2ard_<std::allocator<void> > jet2ard;

typedef boost::shared_ptr< ::driven::jet2ard > jet2ardPtr;
typedef boost::shared_ptr< ::driven::jet2ard const> jet2ardConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::driven::jet2ard_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::driven::jet2ard_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::driven::jet2ard_<ContainerAllocator1> & lhs, const ::driven::jet2ard_<ContainerAllocator2> & rhs)
{
  return lhs.throttle == rhs.throttle &&
    lhs.brake == rhs.brake &&
    lhs.stop_sign == rhs.stop_sign &&
    lhs.start_time == rhs.start_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::driven::jet2ard_<ContainerAllocator1> & lhs, const ::driven::jet2ard_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace driven

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::driven::jet2ard_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::driven::jet2ard_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::driven::jet2ard_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::driven::jet2ard_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::driven::jet2ard_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::driven::jet2ard_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::driven::jet2ard_<ContainerAllocator> >
{
  static const char* value()
  {
    return "66290710e2d0e64ff792d8d065b9d5a8";
  }

  static const char* value(const ::driven::jet2ard_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x66290710e2d0e64fULL;
  static const uint64_t static_value2 = 0xf792d8d065b9d5a8ULL;
};

template<class ContainerAllocator>
struct DataType< ::driven::jet2ard_<ContainerAllocator> >
{
  static const char* value()
  {
    return "driven/jet2ard";
  }

  static const char* value(const ::driven::jet2ard_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::driven::jet2ard_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 throttle\n"
"int64 brake\n"
"int64 stop_sign\n"
"time start_time\n"
;
  }

  static const char* value(const ::driven::jet2ard_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::driven::jet2ard_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.throttle);
      stream.next(m.brake);
      stream.next(m.stop_sign);
      stream.next(m.start_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct jet2ard_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::driven::jet2ard_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::driven::jet2ard_<ContainerAllocator>& v)
  {
    s << indent << "throttle: ";
    Printer<int64_t>::stream(s, indent + "  ", v.throttle);
    s << indent << "brake: ";
    Printer<int64_t>::stream(s, indent + "  ", v.brake);
    s << indent << "stop_sign: ";
    Printer<int64_t>::stream(s, indent + "  ", v.stop_sign);
    s << indent << "start_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.start_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRIVEN_MESSAGE_JET2ARD_H
